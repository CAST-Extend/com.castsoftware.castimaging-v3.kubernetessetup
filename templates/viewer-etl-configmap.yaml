apiVersion: v1
data:
  app.config: "{\n  \"PORT\": \"9001\",\n  \"WORKER_POOL_SIZE\": 4,\n  \"NEO4J_BOLT_ENDPOINT\":
    \"viewer-neo4j.{{ .Release.Namespace }}.svc.cluster.local:7687\",\n  \"NEO4J_USERNAME\":
    \"neo4j\",\n  \"NEO4J_PASSWORD\": \"imaging\",\n  \"TOKEN\": \"D5ED6A406775FC71B8D2A978883E8ED4\",\n
    \ \"NEO4J_IMPORT_PATH\": \"/opt/imaging/imaging-etl/upload/\",\n  \"NEO4J_ARCHIVE_PATH\":
    \"/opt/imaging/imaging-etl/upload/archive/\",\n  \"NEO4J_IMPORT_BATCH_SIZE\":
    \"1000\", \n  \"LOG_PATH\": \"/opt/imaging/imaging-etl/logs/\",\n  \"LOG_LEVEL\":
    \"debug\",\n  \"HTTP_ENDPOINT\": \"http://viewer-server.{{ .Release.Namespace }}.svc.cluster.local:8084\",\n
    \ \"EUREKA_HOST\": \"console-control-panel.{{ .Release.Namespace }}.svc.cluster.local\",\n
    \ \"EUREKA_PORT\": \"8098\",\n  \"SERVICE_HOST\": \"viewer-etl.{{ .Release.Namespace }}.svc.cluster.local\",\n
    \ \"SERVICE_NAME\": \"ImagingEtl\"\n}\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: etlappconfig
  namespace: {{.Release.Namespace}}
---
apiVersion: v1
data:
  init.sh: "#!/bin/bash\n\n#cp  /opt/imaging/imaging-etl/config/web-service-linker/queries.json
    /opt/imaging/imaging-etl/web-service-linker/venv/bin\ncp  /opt/imaging/imaging-etl/config/app.config
    /opt/imaging/imaging-etl/\ncp  /opt/imaging/imaging-etl/config/custom-levels.json
    /opt/imaging/imaging-etl/\ncp  /opt/imaging/imaging-etl/config/AdvisorRuleAndQueryMap.json
    /opt/imaging/imaging-etl/\ncp  /opt/imaging/imaging-etl/config/MainQueries.json
    /opt/imaging/imaging-etl/\n# get curl if not installed\nif ! command -v curl &>
    /dev/null; then\n    echo \"curl is not installed. Installing...\"\n    apt-get
    update\n    apt-get install -y curl\nfi\n\n_term() { \n    echo \"Shutting down
    the server instance\" \n    file_path=\"/opt/imaging/imaging-etl/config/app.config\"\n\n
    \   extract_value() {\n        key=\"$1\"\n        grep \"\\\"$key\\\"\" \"$file_path\"
    | sed -E 's/.*\"([^\"]+)\".*/\\1/'\n    }\n\n    # Check if the file exists\n
    \   if [ -f \"$file_path\" ]; then\n        eureka_host=$(extract_value \"EUREKA_HOST\")\n
    \       eureka_port=$(extract_value \"EUREKA_PORT\")\n        appname=$(extract_value
    \"SERVICE_NAME\")\n        hostname=$(extract_value \"SERVICE_HOST\")\n        port=$(extract_value
    \"PORT\")\n        \n        if [ -n \"$eureka_host\" ]; then\n            echo
    \"Service Manager endpoint: $eureka_host\"\n        else\n            echo \"EUREKA_HOST
    not found in the file.\"\n        fi\n\n        if [ -n \"$eureka_port\" ]; then\n
    \           echo \"eureka port: $eureka_port\"\n        else\n            echo
    \"eureka port not found in the file.\"\n        fi\n        if [ -n \"$hostname\"
    ]; then\n            echo \"hostname: $hostname\"\n        else\n            echo
    \"hostname not found in the file.\"\n        fi\n         if [ -n \"$appname\"
    ]; then\n            echo \"appname: $appname\"\n        else\n            echo
    \"appname not found in the file.\"\n        fi\n         if [ -n \"$port\" ];
    then\n            echo \"port: $port\"\n        else\n            echo \"port
    not found in the file.\"\n        fi\n    else\n        echo \"File not found:
    $file_path\"\n    fi\n\n    endpoint=\"http://$eureka_host:$eureka_port/eureka/apps/$appname/$hostname:$port\"\n\n
    \   curl_result=$(curl -X DELETE -w '%{http_code}' $endpoint)\n\n    if [ \"$curl_result\"
    == \"200\" ]; then\n        echo \"Server Un-registered from micro-service manager\"\n
    \   else\n        echo \"Error sending DELETE request for $endpoint (HTTP Status:
    $curl_result)\"\n    fi\n    echo \"Shut down complete\"\n}\n\n# handle termination
    and unregisteration to eureka\ntrap _term SIGTERM\n\necho \"Starting Servers\"\n/opt/imaging/imaging-etl/imagingetl
    -CONFIG /opt/imaging/imaging-etl/app.config --nodaemon &\n\nchild=$! \nwait \"$child\""
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: etlinitsh
  namespace: {{.Release.Namespace}}
